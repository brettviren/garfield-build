CDECK  ID>, GRAOPT.
       SUBROUTINE GRAOPT(OPT)
*-----------------------------------------------------------------------
*   GRAOPT - Log/linear scales and other options.
*   (Last changed on 17/ 5/08.)
*-----------------------------------------------------------------------
       implicit none
       INTEGER MXWIRE,MXSW,MXLIST,MXCHA,MXGRID,MXMATT,MXPOLE,MX3D,
     -         MXPSTR,
     -         MXPAIR,MXPART,MXFOUR,MXCLUS,
     -         MXLINE,MXEQUT,
     -         MXRECL,MXINCH,MXWORD,MXCHAR,MXNAME,MXLUN,
     -         MXINS,MXREG,MXARG,MXCONS,MXVAR,MXALGE,
     -         MXZERO,MXSTCK,MXFPNT,MXFPAR,MXWKLS,
     -         MXHLEV,MXHLRL,MXSUBT,
     -         MXDLVL,MXILVL,MXDLIN,
     -         MXHIST,MXFRAC,MXBANG,MXBTAB,
     -         MXEXG,MXIOG,MXCSG,
     -         MXORIA,
     -         MXMAT,MXEMAT,MXMDIM,
     -         MXSHOT,MXZPAR,
     -         MXMAP,MXEPS,MXWMAP,MXSOLI,MXSBUF,
     -         MXPLAN,MXPOIN,MXEDGE,
     -         MXMCA
       PARAMETER (MXWIRE=   300,MXSW  =   50)
       PARAMETER (MXMATT=    10)
       PARAMETER (MX3D  =   100)
       PARAMETER (MXPOLE=    10)
       PARAMETER (MXPSTR=   100)
       PARAMETER (MXLIST=  1000)
       PARAMETER (MXHIST=   200, MXCHA = MXLIST/2)
       PARAMETER (MXGRID=    50)
       PARAMETER (MXNAME=   200, MXLUN =    30)
       PARAMETER (MXCLUS=   500, MXPAIR=  2000, MXPART= 10000)
       PARAMETER (MXLINE=   150, MXEQUT=    50)
       PARAMETER (MXFOUR=    16)
       PARAMETER (MXRECL= 10000)
       PARAMETER (MXINCH=  2000, MXWORD=   200, MXCHAR=MXINCH)
       PARAMETER (MXINS =  1000, MXREG =   500, MXCONS=  -500,
     -            MXVAR =   500, MXALGE=   500, MXARG =   100)
       PARAMETER (MXMAT =   500, MXEMAT=200000, MXMDIM=   10)
       PARAMETER (MXZERO=MXWIRE)
       PARAMETER (MXSTCK=     5)
       PARAMETER (MXFPNT= 20000, MXFPAR=    10)
       PARAMETER (MXWKLS=    10)
       PARAMETER (MXHLEV=     9, MXSUBT=   200, MXHLRL=  860)
       PARAMETER (MXDLVL=    10, MXILVL=    20, MXDLIN= 2500)
       PARAMETER (MXFRAC=    13)
       PARAMETER (MXBANG=    20, MXBTAB=    25)
       PARAMETER (MXEXG =    50, MXIOG =    10, MXCSG =  200)
       PARAMETER (MXORIA=  1000)
       PARAMETER (MXSHOT=    10, MXZPAR=4*MXSHOT+2)
       PARAMETER (MXMAP =  5000,MXEPS =   10)
       PARAMETER (MXWMAP=     5)
       PARAMETER (MXSOLI=  1000)
       PARAMETER (MXPLAN= 50000, MXPOIN=100000,MXEDGE=100)
       PARAMETER (MXSBUF= 20000)
       PARAMETER (MXMCA = 50000)
*   The parameter MXNBMC must equal MXGNAM (sequence MAGBPARM) !
       INTEGER MXNBMC
       PARAMETER(MXNBMC=60)
       REAL USERX0,USERX1,USERY0,USERY1,FRXMIN,FRXMAX,FRYMIN,FRYMAX,
     -      ARRANG,ARRLEN,BARFRC,DISPX0,DISPX1,DISPY0,DISPY1,
     -      GPXN,GPXN10,GPYN,GPYN10,GPXL,GPYL,GPXT
       LOGICAL LGRID,LGRALL,LOGX,LOGY,LSTAMP,LGCLRB,LGCLRA,
     -      LWAITA,LWAITB,LXCCH,LGLCLP,LGMCLP,LGACLP,LGTCLP,
     -      WKMULT(MXWKLS)
       INTEGER NWK,WKID(MXWKLS),WKCON(MXWKLS),WKFREF(MXWKLS),
     -         WKLUN(MXWKLS),WKSTAT(MXWKLS),WKSREQ(MXWKLS),
     -         NCWKNM(MXWKLS),NCSTMP,IGHIST,IGBAR,NCGKS
       CHARACTER*20 WKNAME(MXWKLS),WKATTR(MXWKLS)
       CHARACTER*80 STAMP
       CHARACTER*(MXNAME) GKSLOG
       COMMON /GRADAT/ USERX0,USERX1,USERY0,USERY1,ARRANG,ARRLEN,
     -      BARFRC,
     -      FRXMIN,FRXMAX,FRYMIN,FRYMAX,DISPX0,DISPX1,DISPY0,DISPY1,
     -      GPXN,GPXN10,GPYN,GPYN10,GPXL,GPYL,GPXT,
     -      LGRID,LGRALL,LOGX,LOGY,LSTAMP,LGCLRB,LGCLRA,LWAITA,LWAITB,
     -      LXCCH,LGLCLP,LGMCLP,LGACLP,LGTCLP,
     -      NWK,WKID,WKCON,WKFREF,WKLUN,WKSTAT,WKSREQ,NCWKNM,NCSTMP,
     -      IGHIST,IGBAR,NCGKS,WKMULT
       COMMON /GRACHR/ WKNAME,WKATTR,STAMP,GKSLOG
       LOGICAL         LINPUT,LCELPR,LCELPL,LWRMRK,LISOCL,LCHGCH,
     -         LDRPLT,LDRPRT,LCLPRT,LCLPLT,LMAPCH,LCNTAM,
     -         LDEBUG,LIDENT,LKEYPL,LRNDMI,LPROPR,LPROF,LGSTOP,LGSIG,
     -         LSYNCH,LINPRD
       INTEGER LUNOUT,JFAIL,JEXMEM
       COMMON /PRTPLT/ LINPUT,LCELPR,LCELPL,LWRMRK,LISOCL,LCHGCH,
     -         LDRPLT,LDRPRT,LCLPRT,LCLPLT,LMAPCH,LCNTAM,
     -         LDEBUG,LIDENT,LKEYPL,LRNDMI,LPROPR,LPROF,LGSTOP,LGSIG,
     -         LSYNCH,LINPRD,LUNOUT,JFAIL,JEXMEM
       CHARACTER*(*) OPT
       INTEGER INPCMX,I,J,INEXT,ILAST,LENOPT
       EXTERNAL INPCMX
*** Store the length of the string for later reference.
       DO 50 I=LEN(OPT),1,-1
       IF(OPT(I:I).NE.' ')THEN
            LENOPT=I
            GOTO 60
       ENDIF
50     CONTINUE
       RETURN
60     CONTINUE
*** Look for starting character of next word.
       INEXT=1
       DO 10 I=1,LENOPT
       IF(I.LT.INEXT)GOTO 10
*   Skip separators.
       IF(INDEX(' ,',OPT(I:I)).NE.0)GOTO 10
*   Word starts, look for the end.
       DO 20 J=I+1,LENOPT
       IF(INDEX(' ,',OPT(J:J)).EQ.0)GOTO 20
       ILAST=J-1
       GOTO 30
20     CONTINUE
       ILAST=LENOPT
30     CONTINUE
       INEXT=ILAST+1
*   Check the various options.
       IF(INPCMX(OPT(I:ILAST),'LIN#EAR-X').NE.0)THEN
            LOGX=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'LOG#ARITHMIC-X').NE.0)THEN
            LOGX=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'LIN#EAR-Y').NE.0)THEN
            LOGY=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'LOG#ARITHMIC-Y').NE.0)THEN
            LOGY=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'LOG#ARITHMIC-Y').NE.0)THEN
            LOGY=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'GR#ID-DEC#ADES-#ONLY')+
     -      INPCMX(OPT(I:ILAST),'DEC#ADES-#ONLY-#GRID').NE.0)THEN
            LGRALL=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'COMP#LETE-GR#ID')+
     -      INPCMX(OPT(I:ILAST),'GR#ID-COMP#LETE').NE.0)THEN
            LGRALL=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'GR#ID').NE.0)THEN
            LGRID=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOGR#ID').NE.0)THEN
            LGRID=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'T#IME-S#TAMP').NE.0)THEN
            LSTAMP=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOT#IME-S#TAMP').NE.0)THEN
            LSTAMP=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'CL#EAR-BEF#ORE-#PLOT').NE.0)THEN
            LGCLRB=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOCL#EAR-BEF#ORE-#PLOT').NE.0)THEN
            LGCLRB=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'CL#EAR-AFT#ER-#PLOT').NE.0)THEN
            LGCLRA=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOCL#EAR-AFT#ER-#PLOT').NE.0)THEN
            LGCLRA=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'WAIT-AFT#ER-#PLOT').NE.0)THEN
            LWAITA=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOWAIT-AFT#ER-#PLOT').NE.0)THEN
            LWAITA=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'WAIT-BEF#ORE-#PLOT').NE.0)THEN
            LWAITB=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOWAIT-BEF#ORE-#PLOT').NE.0)THEN
            LWAITB=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'CLIP-L#INES').NE.0)THEN
            LGLCLP=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOCLIP-L#INES').NE.0)THEN
            LGLCLP=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'CLIP-M#ARKERS').NE.0)THEN
            LGMCLP=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOCLIP-M#ARKERS').NE.0)THEN
            LGMCLP=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'CLIP-A#REAS').NE.0)THEN
            LGACLP=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOCLIP-A#REAS').NE.0)THEN
            LGACLP=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'CLIP-T#EXT').NE.0)THEN
            LGTCLP=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'NOCLIP-T#EXT').NE.0)THEN
            LGTCLP=.FALSE.
       ELSEIF(INPCMX(OPT(I:ILAST),'EX#ECUTE-CONTR#OL-#CHARACTERS').NE.
     -      0)THEN
            LXCCH=.TRUE.
       ELSEIF(INPCMX(OPT(I:ILAST),'DISP#LAY-CONTR#OL-#CHARACTERS').NE.
     -      0)THEN
            LXCCH=.FALSE.
       ELSE
            PRINT *,' !!!!!! GRAOPT WARNING : The option ',
     -           OPT(I:ILAST),' is not valid ; is ignored.'
       ENDIF
*   Position for next word.
       INEXT=ILAST+1
       IF(INEXT.GT.LENOPT)THEN
            IF(LDEBUG)WRITE(LUNOUT,
     -           '(''  ++++++ GRAOPT DEBUG   : Current options:''/
     -           26X,''Logarithmic-x= '',L1,'', Logarithmic-y='',L1/
     -           26X,''Grid overlay = '',L1,'', Time stamp   ='',L1/
     -           26X,''Clear Before = '',L1,'', Clear After  ='',L1/
     -           26X,''Wait Before  = '',L1,'', Wait After   ='',L1/
     -           26X,''Execute CC   = '',L1,'', Clip lines   ='',L1/
     -           26X,''Clip markers = '',L1,'', Clip areas   ='',L1/
     -           26X,''Clip text    = '',L1,'', Full grid    ='',L1)')
     -           LOGX,LOGY,LGRID,LSTAMP,LGCLRB,LGCLRA,LWAITB,LWAITA,
     -           LXCCH,LGLCLP,LGMCLP,LGACLP,LGTCLP,LGRALL
            RETURN
       ENDIF
10     CONTINUE
       END
