CDECK  ID>, MONTEC.
      SUBROUTINE MONTEC
      IMPLICIT REAL*8 (A-H,O-Z)
*   Array dimensions.
       integer mxngas
       parameter(mxngas=6)
       INTEGER NGAS,NSTEP,IDBG
       DOUBLE PRECISION EFINAL,ESTEP,AKT,ARY,TEMPC,TORR
       PARAMETER(ARY=13.60569172)
       COMMON/INPT/NGAS,NSTEP,EFINAL,ESTEP,AKT,TEMPC,TORR,IDBG
       DOUBLE PRECISION CONST1,CONST2,CONST3,CONST4,CONST5
       COMMON/CNSTS1/CONST1,CONST2,CONST3,CONST4,CONST5
       DOUBLE PRECISION TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX,RSTART,
     -      EMAG
       INTEGER NMAX
       COMMON/SETP/TMAX,SMALL,API,ESTART,THETA,PHI,TCFMAX(8),RSTART,
     -      EMAG,NMAX
       DOUBLE PRECISION EOVB,WB,BTHETA,BMAG
       COMMON/BFLD/EOVB,WB,BTHETA,BMAG
*   Sometimes IPLAST is called LAST
       DOUBLE PRECISION CF,EIN,TCF,RGAS,WPL
       INTEGER IARRY,IPN,IPLAST,ISIZE
       COMMON/LARGE/CF(2048,512),EIN(512),TCF(2048),IARRY(512),
     -      RGAS(512),IPN(512),WPL(512),IPLAST,ISIZE
*   Is in effect the old ANCT common.
       DOUBLE PRECISION PSCT,ANGCT
       INTEGER INDEX,NISO
       COMMON/ANIS/PSCT(2048,512),ANGCT(2048,512),INDEX(512),NISO
*   Grouped QIN1 ... QIN6 in QINN
       DOUBLE PRECISION QELM,QSUM,QION,QINN,QSATT
       COMMON /MIX1/ QELM(2048),QSUM(2048),QION(mxngas,2048),
     -      QINn(220,2048,mxngas),QSATT(2048)
*   EVECT is originally called E or ES depending on the routine.
       DOUBLE PRECISION Evect,EROOT,QTOT,QREL,QINEL,QEL
       COMMON /MIX2/ Evect(2048),EROOT(2048),QTOT(2048),QREL(2048),
     -      QINEL(2048),QEL(2048)
*   Extensively reduced.
       INTEGER NINn
*           ,LION,LIN1,LIN2,LIN3,LIN4,LIN5,LIN6
*           DOUBLE PRECISION ALION,ALIN1,ALIN2,ALIN3,ALIN4,ALIN5,ALIN6
       COMMON /MIX3/ NINn(mxngas)
*           ,LION(6),LIN1(220),
*     -      LIN2(220),LIN3(220),LIN4(220),LIN5(220),LIN6(220),ALION(6),
*     -      ALIN1(220),ALIN2(220),ALIN3(220),ALIN4(220),ALIN5(220),
*     -      ALIN6(220)
       DOUBLE PRECISION ALPHA,ATT
       COMMON /CTOWNS/ ALPHA,ATT
       DOUBLE PRECISION ALPER,ATTER
       COMMON /CTWNER/ ALPER,ATTER
       DOUBLE PRECISION DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
       COMMON /DIFERB/ DXXER,DYYER,DZZER,DYZER,DXYER,DXZER
       DOUBLE PRECISION DFLER,DFTER
       COMMON /DIFERL/ DFLER,DFTER
       DOUBLE PRECISION DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
       COMMON /DIFLAB/ DIFXX,DIFYY,DIFZZ,DIFYZ,DIFXY,DIFXZ
       DOUBLE PRECISION DIFLN,DIFTR
       COMMON /DIFVEL/ DIFLN,DIFTR
       DOUBLE PRECISION WX,WY,WZ
       COMMON /VEL/ WX,WY,WZ
       DOUBLE PRECISION DWX,DWY,DWZ
       COMMON /VELERR/ DWX,DWY,DWZ
*   Adjusted size of ICOLL
       DOUBLE PRECISION TIME,SPEC,TMAX1,AVE,DEN,XID,X,Y,Z,ST
       INTEGER ICOLL,NNULL,ICOLN
       COMMON/OUTPT/TIME(300),ICOLL(5*mxngas),SPEC(2048),TMAX1,
     -      AVE,DEN,XID,X,Y,Z,ST,NNULL,ICOLN(512)
*-----------------------------------------------------------------------
*   MAGPAR - Interface parameters for gas mixing with Magboltz.
*   (Last changed on  2/ 3/08.)
*-----------------------------------------------------------------------
       INTEGER MXGNAM
       PARAMETER(MXGNAM=60)
       DOUBLE PRECISION FRAMIX
       LOGICAL LF0PLT,LCSPLT,LGKEEP,LBMCPR
       COMMON /MAGPAR/ FRAMIX(MXGNAM),LF0PLT,LCSPLT,LGKEEP,LBMCPR
       LOGICAL         LINPUT,LCELPR,LCELPL,LWRMRK,LISOCL,LCHGCH,
     -         LDRPLT,LDRPRT,LCLPRT,LCLPLT,LMAPCH,LCNTAM,
     -         LDEBUG,LIDENT,LKEYPL,LRNDMI,LPROPR,LPROF,LGSTOP,LGSIG,
     -         LSYNCH,LINPRD
       INTEGER LUNOUT,JFAIL,JEXMEM
       COMMON /PRTPLT/ LINPUT,LCELPR,LCELPL,LWRMRK,LISOCL,LCHGCH,
     -         LDRPLT,LDRPRT,LCLPRT,LCLPLT,LMAPCH,LCNTAM,
     -         LDEBUG,LIDENT,LKEYPL,LRNDMI,LPROPR,LPROF,LGSTOP,LGSIG,
     -         LSYNCH,LINPRD,LUNOUT,JFAIL,JEXMEM
      DIMENSION XST(100000),YST(100000),ZST(100000),STO(100000)
      DIMENSION WZST(10),WYST(10),WXST(10),AVEST(10)
      DIMENSION DFZZST(10),DFYYST(10),DFXXST(10)
      DIMENSION DFYZST(10),DFXYST(10),DFXZST(10)
C -------------------------------------------------------------------
C   CALCULATES COLLISION EVENTS AND UPDATES DIFFUSION AND VELOCITY.
C   SUBROUTINE SOLVES MOTION IN COORDINATE SYSTEM WITH BFIELD
C   ALIGNED ALONG X AXIS AND ELECTRIC FIELD AT AN ANGLE BTHETA IN
C   THE X-Z PLANE.  THE VELOCITY VECTORS AND DIFFUSION ARE THEN
C   ROTATED INTO THE STANDARD COORDINATE FRAME WITH THE ELECTRIC-
C   FIELD ALONG Z-AXIS AND THE  BFIELD AT AN ANGLE BTHETA TO THE
C   ELECTRIC FIELD IN THE X-Z PLANE.
C -------------------------------------------------------------------
      X=0.0D0
      Y=0.0D0
      Z=0.0D0
C CALC LONG AND TRANS ONLY FOR 90 DEGREES BETWEEN E AND B
      DIFLN=0.0D0
      DIFTR=0.0D0
      DFLER=0.0D0
      DFTER=0.0D0
      DIFXXR=0.0D0
      DIFYYR=0.0D0
      DIFZZR=0.0D0
      DIFYZR=0.0D0
      DIFXZR=0.0D0
      DIFXYR=0.0D0
      ST=0.0D0
      ST1=0.0D0
      SUMXX=0.0D0
      SUMYY=0.0D0
      SUMZZ=0.0D0
      SUMYZ=0.0D0
      SUMXY=0.0D0
      SUMXZ=0.0D0
      ZROLD=0.0D0
      YROLD=0.0D0
      XROLD=0.0D0
      SZZR=0.0D0
      SYYR=0.0D0
      SXXR=0.0D0
      SXYR=0.0D0
      SYZR=0.0D0
      SXZR=0.0D0
      STOLD=0.0D0
      ST1OLD=0.0D0
      ST2OLD=0.0D0
      SZZOLD=0.0D0
      SYYOLD=0.0D0
      SXXOLD=0.0D0
      SYZOLD=0.0D0
      SXYOLD=0.0D0
      SXZOLD=0.0D0
      EBAROLD=0.0D0
      SMALL=1.0D-20
      TMAX1=0.0D0
      API=ACOS(-1.0D0)
C CALC ROTATION MATRIX ANGLES
      RCS=COS((BTHETA-90.0D0)*API/180.0D0)
      RSN=SIN((BTHETA-90.0D0)*API/180.0D0)
C
      RTHETA=BTHETA*API/180.0D0
      EFZ100=EMAG*100.0D0*SIN(RTHETA)
      EFX100=EMAG*100.0D0*COS(RTHETA)
      F1=EMAG*CONST2*COS(RTHETA)
      EOVBR=EOVB*SIN(RTHETA)
      RDUM=RSTART
      E1=ESTART
      INTEM=8
      ITMAX=10
      ID=0
      NCOL=0
      NNULL=0
      NCOLM=100000
      TDASH=0.0D0
      CONST9=CONST3*0.01D0
C
C     INITIAL DIRECTION COSINES
C
      DCZ1=COS(THETA)
      DCX1=SIN(THETA)*COS(PHI)
      DCY1=SIN(THETA)*SIN(PHI)
C     INITIAL VELOCITY
      VTOT=CONST9*SQRT(E1)
      CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
      F4=2.0D0*API
      DELTAE=EFINAL/DBLE(INTEM)
      J2M=NMAX/ITMAX
C MAIN LOOP
      DO 210 J1=1,ITMAX
      DO 133 J2=1,J2M
    1 R1=drand48(RDUM)
      I=INT(E1/DELTAE)+1
      I=MIN(I,INTEM)
      TLIM=TCFMAX(I)
      T=-LOG(R1)/TLIM+TDASH
      TDASH=T
      WBT=WB*T
      COSWT=COS(WBT)
      SINWT=SIN(WBT)
      DZ=(CZ1*SINWT+(EOVBR-CY1)*(1.0D0-COSWT))/WB
      DX=CX1*T+F1*T*T
      E=E1+DZ*EFZ100+DX*EFX100
C     IF(E.LT.0.0 .and. LBMCPR)WRITE(LUNOUT,983)
C    -      J2,DZ,E1,COSWT,SINWT,WBT,CY1
C983  FORMAT(2X,' J2=',I12,' DZ=',D12.3,' E1=',D12.3,' COSWT=',D12.3
C    /,' SINWT=',D12.3,' WBT=',D12.3,' CY1=',D12.3)
      IE=INT(E/ESTEP)+1
      IE=MIN(IE,2048)
      IF(TCF(IE).GT.TLIM) THEN
       TDASH=TDASH+LOG(R1)/TLIM
       TCFMAX(I)=1.05D0*TCFMAX(I)
C      IF(LBMCPR)WRITE(LUNOUT,996)
C996   FORMAT(/,5X,' WARNING NULL COLLISION TIME INCREASED',/)
       GO TO 1
      ENDIF
C
C     TEST FOR REAL OR NULL COLLISION
C
      R5=drand48(RDUM)
      TLIM=TCF(IE)/TLIM
      IF(R5.GT.TLIM) THEN
       NNULL=NNULL+1
       GO TO 1
      ENDIF
C
C  CALCULATE DIRECTION COSINES AND POSITIONS AT INSTANT BEFORE COLLISION
C    ALSO UPDATE DIFFUSION  AND ENERGY CALCULATIONS.
      T2=T*T
      IF(T.GE.TMAX1) TMAX1=T
      TDASH=0.0D0
C  CALC VELOCITY
      CX2=CX1+2.0D0*F1*T
      CY2=(CY1-EOVBR)*COSWT+CZ1*SINWT+EOVBR
      CZ2=CZ1*COSWT-(CY1-EOVBR)*SINWT
C CALC DIRECTION COSINE
      VTOT=SQRT(CX2*CX2+CY2*CY2+CZ2*CZ2)
      DCX2=CX2/VTOT
      DCY2=CY2/VTOT
      DCZ2=CZ2/VTOT
      NCOL=NCOL+1
C CALC NEW POSITION
      X=X+DX
      Y=Y+EOVBR*T+((CY1-EOVBR)*SINWT+CZ1*(1.0D0-COSWT))/WB
      Z=Z+DZ
      ST=ST+T
      IT=INT(T+1.0D0)
      IT=MIN(IT,300)
      TIME(IT)=TIME(IT)+1.0D0
      SPEC(IE)=SPEC(IE)+1.0D0
      WZ=Z/ST
      WY=Y/ST
      WX=X/ST
      IF(J1.LT.3) GO TO 121
      KDUM=0
      DO 120 J=1,4
      NCOLDM=NCOL+KDUM
      IF(NCOLDM.GT.NCOLM) NCOLDM=NCOLDM-NCOLM
      ST1=ST1+T
      SDIF=ST-STO(NCOLDM)
      SUMZZ=SUMZZ+((Z-ZST(NCOLDM)-WZ*SDIF)**2)*T/SDIF
      SUMYY=SUMYY+((Y-YST(NCOLDM)-WY*SDIF)**2)*T/SDIF
      SUMXX=SUMXX+((X-XST(NCOLDM)-WX*SDIF)**2)*T/SDIF
      SUMYZ=SUMYZ+(Z-ZST(NCOLDM)-WZ*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      SUMXY=SUMXY+(X-XST(NCOLDM)-WX*SDIF)*(Y-YST(NCOLDM)-WY*SDIF)*T/SDIF
      SUMXZ=SUMXZ+(X-XST(NCOLDM)-WX*SDIF)*(Z-ZST(NCOLDM)-WZ*SDIF)*T/SDIF
 120  KDUM=KDUM+12500
 121  XST(NCOL)=X
      YST(NCOL)=Y
      ZST(NCOL)=Z
      STO(NCOL)=ST
      IF(NCOL.GE.NCOLM) THEN
       ID=ID+1
       XID=DBLE(ID)
       NCOL=0
      ENDIF
C ---------------------------------------------------------------------
C     DETERMINATION OF REAL COLLISION TYPE
C ---------------------------------------------------------------------
      R2=drand48(RDUM)
C FIND LOCATION WITHIN 4 UNITS IN COLLISION ARRAY
      CALL SORT(I,R2,IE)
  140 I=I+1
      IF(CF(IE,I).LT.R2) GO TO 140
      S1=RGAS(I)
      EI=EIN(I)
      IF(IPN(I).LE.0) GO TO 666
C  USE FLAT DISTRIBUTION OF  ELECTRON ENERGY BETWEEN E-EION AND 0.0 EV
C  SAME AS IN BOLTZMANN
      R9=drand48(RDUM)
      EXTRA=R9*(E-EI)
      EI=EXTRA+EI
C
C  GENERATE SCATTERING ANGLES AND UPDATE  LABORATORY COSINES AFTER
C   COLLISION ALSO UPDATE ENERGY OF ELECTRON.
C
  666 IPT=IARRY(I)
      ICOLL(IPT)=ICOLL(IPT)+1
      ICOLN(I)=ICOLN(I)+1
      IF(E.LT.EI) THEN
C      IF(LBMCPR)WRITE(LUNOUT,994) E,EI,J2
C994  FORMAT(2X,' WARNING ENERGY =',F8.3,' LESS THAN ENERGY LOSS EI=',F8
C    /.3,' AT ITER=',I12,' DUE TO BINNING ERROR')
C  FIX ENERGY LOSS SMALLER THAN INCIDENT ENERGY IF ERROR OCCURS
       EI=E-0.0001D0
      ENDIF
      S2=(S1*S1)/(S1-1.0D0)
C ANISOTROPIC SCATTERING
      IF(INDEX(I).NE.0) THEN
        R31=drand48(RDUM)
        R3=drand48(RDUM)
        F3=1.0D0-R3*ANGCT(IE,I)
        IF(R31.GT.PSCT(IE,I)) F3=-F3
      ELSE
C ISOTROPIC SCATTERING
        R3=drand48(RDUM)
        F3=1.0D0-2.0D0*R3
      ENDIF
      THETA0=ACOS(F3)
      R4=drand48(RDUM)
      PHI0=F4*R4
      F8=SIN(PHI0)
      F9=COS(PHI0)
      ARG1=1.0D0-S1*EI/E
      ARG1=MAX(ARG1,SMALL)
      D=1.0D0-F3*SQRT(ARG1)
      E1=E*(1.0D0-EI/(S1*E)-2.0D0*D/S2)
      E1=MAX(E1,SMALL)
      Q=SQRT((E/E1)*ARG1)/S1
      Q=MIN(Q,1.0D0)
      THETA=ASIN(Q*SIN(THETA0))
      F6=COS(THETA)
      U=(S1-1.0D0)*(S1-1.0D0)/ARG1
      CSQD=F3*F3
      IF(F3.LT.0.0D0.AND.CSQD.GT.U) F6=-1.0D0*F6
      F5=SIN(THETA)
      DCZ2=MIN(DCZ2,1.0D0)
      VTOT=CONST9*SQRT(E1)
      ARGZ=SQRT(DCX2*DCX2+DCY2*DCY2)
      IF(ARGZ.EQ.0.0D0) THEN
C      IF(LBMCPR)WRITE(LUNOUT,9232) ITER,ID,E1
C9232  FORMAT(3X,'WARNING ARGZ= 0.0 AT ITER =',I10,' ID =',I10,' E1=',E1
C    /2.3)
       DCZ1=F6
       DCX1=F9*F5
       DCY1=F8*F5
       GO TO 130
      ENDIF
      DCZ1=DCZ2*F6+ARGZ*F5*F8
      DCY1=DCY2*F6+(F5/ARGZ)*(DCX2*F9-DCY2*DCZ2*F8)
      DCX1=DCX2*F6-(F5/ARGZ)*(DCY2*F9+DCX2*DCZ2*F8)
C CALCULATE VELOCITY VECTORS AFTER COLLISION
  130 CX1=DCX1*VTOT
      CY1=DCY1*VTOT
      CZ1=DCZ1*VTOT
  133 CONTINUE
C   ------------------------------------------
      IF(J1.EQ.1 .and. LBMCPR)WRITE(LUNOUT,201)
  201 FORMAT(/,'   VELZ    VELY    VELX   ENERGY  ID  DIFXX  DIFYY  DIFZ
     /Z  DIFYZ  DIFXZ  DIFXY',/)
      WZ=WZ*1.0D+09
      WY=WY*1.0D+09
      WX=WX*1.0D+09
C CALCULATE ROTATED VECTORS AND POSITIONS
      WZR=WZ*RCS-WX*RSN
      WYR=WY
      WXR=WZ*RSN+WX*RCS
      ZR=Z*RCS-X*RSN
      YR=Y
      XR=Z*RSN+X*RCS
      EBAR=0.0D0
      DO 300 IK=1,2048
*   Changed name of ES to EVECT (RV, 20/4/2005)
 300  EBAR=EBAR+Evect(IK)*SPEC(IK)/TCF(IK)
      AVE=EBAR/ST
      WZST(J1)=(ZR-ZROLD)/(ST-STOLD)*1.0D+09
      WYST(J1)=(YR-YROLD)/(ST-STOLD)*1.0D+09
      WXST(J1)=(XR-XROLD)/(ST-STOLD)*1.0D+09
      AVEST(J1)=(EBAR-EBAROLD)/(ST-STOLD)
      EBAROLD=EBAR
      IF(J1.LT.3) GO TO 100
      DIFXX=5.0D+15*SUMXX/ST1
      DIFYY=5.0D+15*SUMYY/ST1
      DIFZZ=5.0D+15*SUMZZ/ST1
      DIFYZ=5.0D+15*SUMYZ/ST1
      DIFXZ=5.0D+15*SUMXZ/ST1
      DIFXY=5.0D+15*SUMXY/ST1
C CALCULATE  ROTATED TENSOR .
      DIFXXR=DIFXX*RCS*RCS+DIFZZ*RSN*RSN+2.0D0*RCS*RSN*DIFXZ
      DIFYYR=DIFYY
      DIFZZR=DIFXX*RSN*RSN+DIFZZ*RCS*RCS-2.0D0*RCS*RSN*DIFXZ
      DIFXYR=RCS*DIFXY+RSN*DIFYZ
      DIFYZR=RSN*DIFXY-RCS*DIFYZ
      DIFXZR=(RCS*RCS-RSN*RSN)*DIFXZ-RSN*RCS*(DIFXX-DIFZZ)
      SXXR=SUMXX*RCS*RCS+SUMZZ*RSN*RSN+2.0D0*RCS*RSN*SUMXZ
      SYYR=SUMYY
      SZZR=SUMXX*RSN*RSN+SUMZZ*RCS*RCS-2.0D0*RCS*RSN*SUMXZ
      SXYR=RCS*SUMXY+RSN*SUMYZ
      SYZR=RSN*SUMXY-RCS*SUMYZ
      SXZR=(RCS*RCS-RSN*RSN)*SUMXZ-RSN*RCS*(SUMXX-SUMZZ)
C
  100 DFZZST(J1)=0.0D0
      DFYYST(J1)=0.0D0
      DFXXST(J1)=0.0D0
      DFXYST(J1)=0.0D0
      DFYZST(J1)=0.0D0
      DFXZST(J1)=0.0D0
      IF(J1.GT.2) THEN
       DFZZST(J1)=5.0D+15*(SZZR-SZZOLD)/(ST1-ST1OLD)
       DFYYST(J1)=5.0D+15*(SYYR-SYYOLD)/(ST1-ST1OLD)
       DFXXST(J1)=5.0D+15*(SXXR-SXXOLD)/(ST1-ST1OLD)
       DFXYST(J1)=5.0D+15*(SXYR-SXYOLD)/(ST1-ST1OLD)
       DFYZST(J1)=5.0D+15*(SYZR-SYZOLD)/(ST1-ST1OLD)
       DFXZST(J1)=5.0D+15*(SXZR-SXZOLD)/(ST1-ST1OLD)
      ENDIF
      ZROLD=ZR
      YROLD=YR
      XROLD=XR
      STOLD=ST
      ST1OLD=ST1
      SZZOLD=SZZR
      SYYOLD=SYYR
      SXXOLD=SXXR
      SXYOLD=SXYR
      SYZOLD=SYZR
      SXZOLD=SXZR
C OUTPUT ROTATED VECTORS AND TENSOR
       IF(LBMCPR)WRITE(LUNOUT,202)
     -      WZR,WYR,WXR,AVE,ID,DIFXXR,DIFYYR,DIFZZR,DIFYZR,DIFXZR,DIFXYR
  202 FORMAT(3(F7.2,1X),1X,F7.4,I4,6(F7.1))
C LOOP
  210 CONTINUE
C CALCULATE ERRORS AND CHECK AVERAGES
      TWZST=0.0D0
      TWYST=0.0D0
      TWXST=0.0D0
      TAVE=0.0D0
      T2WZST=0.0D0
      T2WYST=0.0D0
      T2WXST=0.0D0
      T2AVE=0.0D0
      TZZST=0.0D0
      TYYST=0.0D0
      TXXST=0.0D0
      TXYST=0.0D0
      TYZST=0.0D0
      TXZST=0.0D0
      T2ZZST=0.0D0
      T2YYST=0.0D0
      T2XXST=0.0D0
      T2XYST=0.0D0
      T2YZST=0.0D0
      T2XZST=0.0D0
      DO 768 K=1,10
      TWZST=TWZST+WZST(K)
      TWYST=TWYST+WYST(K)
      TWXST=TWXST+WXST(K)
      TAVE=TAVE+AVEST(K)
      T2WZST=T2WZST+WZST(K)*WZST(K)
      T2WYST=T2WYST+WYST(K)*WYST(K)
      T2WXST=T2WXST+WXST(K)*WXST(K)
      T2AVE=T2AVE+AVEST(K)*AVEST(K)
      IF(K.LT.3) GO TO 768
      TZZST=TZZST+DFZZST(K)
      TYYST=TYYST+DFYYST(K)
      TXXST=TXXST+DFXXST(K)
      TXYST=TXYST+DFXYST(K)
      TYZST=TYZST+DFYZST(K)
      TXZST=TXZST+DFXZST(K)
      T2ZZST=T2ZZST+DFZZST(K)*DFZZST(K)
      T2YYST=T2YYST+DFYYST(K)*DFYYST(K)
      T2XXST=T2XXST+DFXXST(K)*DFXXST(K)
      T2XYST=T2XYST+DFXYST(K)*DFXYST(K)
      T2YZST=T2YZST+DFYZST(K)*DFYZST(K)
      T2XZST=T2XZST+DFXZST(K)*DFXZST(K)
  768 CONTINUE
      DWZ=100.0D0*SQRT((T2WZST-TWZST*TWZST/10.0D0)/9.0D0)/WZR
      DWY=100.0D0*SQRT((T2WYST-TWYST*TWYST/10.0D0)/9.0D0)/ABS(WYR)
      DWX=100.0D0*SQRT((T2WXST-TWXST*TWXST/10.0D0)/9.0D0)/ABS(WXR)
      DEN=100.0D0*SQRT((T2AVE-TAVE*TAVE/10.0D0)/9.0D0)/AVE
      DZZER=100.0D0*SQRT((T2ZZST-TZZST*TZZST/8.0D0)/7.0D0)/DIFZZR
      DYYER=100.0D0*SQRT((T2YYST-TYYST*TYYST/8.0D0)/7.0D0)/DIFYYR
      DXXER=100.0D0*SQRT((T2XXST-TXXST*TXXST/8.0D0)/7.0D0)/DIFXXR
      DXYER=100.0D0*SQRT((T2XYST-TXYST*TXYST/8.0D0)/7.0D0)/ABS(DIFXYR)
      DYZER=100.0D0*SQRT((T2YZST-TYZST*TYZST/8.0D0)/7.0D0)/ABS(DIFYZR)
      DXZER=100.0D0*SQRT((T2XZST-TXZST*TXZST/8.0D0)/7.0D0)/ABS(DIFXZR)
C LOAD ROTATED VALUES INTO ARRAYS
      WZ=WZR
      WX=WXR
      WY=WYR
      DIFXX=DIFXXR
      DIFYY=DIFYYR
      DIFZZ=DIFZZR
      DIFYZ=DIFYZR
      DIFXZ=DIFXZR
      DIFXY=DIFXYR
C CONVERT TO CM/SEC.
      WZ=WZ*1.0D05
      WY=WY*1.0D05
      WX=WX*1.0D05
C CALCULATE TOWNSEND COEFICIENTS AND ERRORS
      ANCATT=0.0D0
      ANCION=0.0D0
      DO 800 I=1,NGAS
      ANCATT=ANCATT+ICOLL((5*I)-2)
  800 ANCION=ANCION+ICOLL((5*I)-3)
      ATTER=0.0D0
      IF(ANCATT.EQ.0.0D0) GO TO 810
      ATTER=100.0D0*SQRT(ANCATT)/ANCATT
  810 ATT=ANCATT/(ST*WZ)*1.0D12
      ALPER=0.0D0
      IF(ANCION.EQ.0.0D0) GO TO 820
      ALPER=100.0D0*SQRT(ANCION)/ANCION
  820 ALPHA=ANCION/(ST*WZ)*1.0D12
      END
