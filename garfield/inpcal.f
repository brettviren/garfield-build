CDECK  ID>, INPCAL.
       SUBROUTINE INPCAL(MODE,IENTRY,IFAIL)
*-----------------------------------------------------------------------
*   INPCAL - Handles CALL statements in normal input.
*   (Last changed on  5/ 9/13.)
*-----------------------------------------------------------------------
       implicit none
       INTEGER MXWIRE,MXSW,MXLIST,MXCHA,MXGRID,MXMATT,MXPOLE,MX3D,
     -         MXPSTR,
     -         MXPAIR,MXPART,MXFOUR,MXCLUS,
     -         MXLINE,MXEQUT,
     -         MXRECL,MXINCH,MXWORD,MXCHAR,MXNAME,MXLUN,
     -         MXINS,MXREG,MXARG,MXCONS,MXVAR,MXALGE,
     -         MXZERO,MXSTCK,MXFPNT,MXFPAR,MXWKLS,
     -         MXHLEV,MXHLRL,MXSUBT,
     -         MXDLVL,MXILVL,MXDLIN,
     -         MXHIST,MXFRAC,MXBANG,MXBTAB,
     -         MXEXG,MXIOG,MXCSG,
     -         MXORIA,
     -         MXMAT,MXEMAT,MXMDIM,
     -         MXSHOT,MXZPAR,
     -         MXMAP,MXEPS,MXWMAP,MXSOLI,MXSBUF,
     -         MXPLAN,MXPOIN,MXEDGE,
     -         MXMCA
       PARAMETER (MXWIRE=  2000,MXSW  =  200)
       PARAMETER (MXMATT=    10)
       PARAMETER (MX3D  =   100)
       PARAMETER (MXPOLE=    10)
       PARAMETER (MXPSTR=   100)
       PARAMETER (MXLIST=  1000)
       PARAMETER (MXHIST=   200, MXCHA = MXLIST/2)
       PARAMETER (MXGRID=    50)
       PARAMETER (MXNAME=   200, MXLUN =    30)
       PARAMETER (MXCLUS=   500, MXPAIR=  2000, MXPART= 10000)
       PARAMETER (MXLINE=   150, MXEQUT=    50)
       PARAMETER (MXFOUR=    16)
       PARAMETER (MXRECL= 10000)
       PARAMETER (MXINCH=  2000, MXWORD=   200, MXCHAR=MXINCH)
       PARAMETER (MXINS =  1000, MXREG =   500, MXCONS=  -500,
     -            MXVAR =   500, MXALGE=   500, MXARG =   100)
       PARAMETER (MXMAT =   500, MXEMAT=200000, MXMDIM=   10)
       PARAMETER (MXZERO=MXWIRE)
       PARAMETER (MXSTCK=     5)
       PARAMETER (MXFPNT= 20000, MXFPAR=    10)
       PARAMETER (MXWKLS=    10)
       PARAMETER (MXHLEV=     9, MXSUBT=   200, MXHLRL=  860)
       PARAMETER (MXDLVL=    10, MXILVL=    20, MXDLIN= 2500)
       PARAMETER (MXFRAC=    13)
       PARAMETER (MXBANG=    20, MXBTAB=    25)
       PARAMETER (MXEXG =    50, MXIOG =    10, MXCSG =  200)
       PARAMETER (MXORIA=  1000)
       PARAMETER (MXSHOT=    10, MXZPAR=4*MXSHOT+2)
       PARAMETER (MXMAP =350000,MXEPS =   10)
       PARAMETER (MXWMAP=     5)
       PARAMETER (MXSOLI=  1000)
       PARAMETER (MXPLAN= 50000, MXPOIN=100000,MXEDGE=100)
       PARAMETER (MXSBUF= 20000)
       PARAMETER (MXMCA = 50000)
*   The parameter MXNBMC must equal MXGNAM (sequence MAGBPARM) !
       INTEGER MXNBMC
       PARAMETER(MXNBMC=60)
       REAL GLBVAL(MXVAR)
       INTEGER NGLB,GLBMOD(MXVAR)
       CHARACTER*10 GLBVAR(MXVAR)
       COMMON /GLBDAT/ GLBVAL,GLBMOD,NGLB
       COMMON /GLBCHR/ GLBVAR
       LOGICAL         LINPUT,LCELPR,LCELPL,LWRMRK,LISOCL,LCHGCH,
     -         LDRPLT,LDRPRT,LCLPRT,LCLPLT,LMAPCH,LCNTAM,
     -         LDEBUG,LIDENT,LKEYPL,LRNDMI,LPROPR,LPROF,LGSTOP,LGSIG,
     -         LSYNCH,LINPRD
       INTEGER LUNOUT,JFAIL,JEXMEM
       COMMON /PRTPLT/ LINPUT,LCELPR,LCELPL,LWRMRK,LISOCL,LCHGCH,
     -         LDRPLT,LDRPRT,LCLPRT,LCLPLT,LMAPCH,LCNTAM,
     -         LDEBUG,LIDENT,LKEYPL,LRNDMI,LPROPR,LPROF,LGSTOP,LGSIG,
     -         LSYNCH,LINPRD,LUNOUT,JFAIL,JEXMEM
       CHARACTER*(MXINCH+1) STRING
       CHARACTER*(MXINCH)   ARGSTR
       CHARACTER*30         ERRCDE(MXWORD)
       CHARACTER*(MXCHAR)   WORD(MXWORD)
       CHARACTER*80         PROMPT,EOFSTR,SHELL
       CHARACTER            ESCAPE
       CHARACTER*(MXNAME)   FNINP,FNOUT
       INTEGER NCHAR(MXWORD),INDWRD(MXWORD),ICHSET,LUNSTR(5:MXLUN,3),
     -      NWORD,LUN,NCPROM,NCEOF,NCSH,NCARG,NCFNI,NCFNO
       LOGICAL ERRPRT(MXWORD),LPROM,DOEXEC,DOREAD,LINREC
       COMMON /INPCOM/ NCHAR,INDWRD,LUNSTR,NWORD,LUN,ICHSET,NCPROM,
     -      ERRPRT,LPROM,DOEXEC,DOREAD,NCEOF,LINREC,NCSH,NCARG,
     -      NCFNI,NCFNO
       COMMON /INPCHR/ ERRCDE,STRING,WORD,PROMPT,EOFSTR,ESCAPE,SHELL,
     -      ARGSTR,FNINP,FNOUT
       INTEGER INS(MXINS,4),ALGENT(MXALGE,10),MODREG(MXCONS:MXREG),
     -      ISYNCH,IINS0,ICONS0,ARGREF(MXARG,2),MODARG(MXARG),
     -      NREG,NCONS,NINS,NERR,NRES,NALGE,IENTRL,NAERR(100)
       REAL REG(MXCONS:MXREG),ARG(MXARG),EXPMAX
       PARAMETER(EXPMAX=40.0)
       LOGICAL EXEC(MXINS),LIGUND,LINUND
       COMMON /ALGDAT/ REG,ARG,MODARG,ARGREF,INS,MODREG,ALGENT,
     -      NREG,NCONS,NINS,NERR,NAERR,
     -      NRES,NALGE,IENTRL,ISYNCH,IINS0,ICONS0,EXEC,LIGUND,LINUND
       CHARACTER*(*) MODE
       LOGICAL USE(MXVAR),SQUOTE,DQUOTE,RQUOTE
       REAL RES(1)
       INTEGER MODRES(1),IENTRY,IFAIL,IFAIL1,ICALL,I,J,II,JJ,NLEV,
     -      ISTART,IEND,I0,I1,I2,KARG,NNRES,IPROC,IENTNO,IFIRST,ILAST
*** First few returns are all on IFAIL=1.
       IFAIL=1
*** Don't do anything if there is just 1 word.
       IF(NWORD.LE.1)THEN
            PRINT *,' !!!!!! INPCAL WARNING : CALL must be followed'//
     -           ' by at least a routine name; ignored.'
            RETURN
       ENDIF
*** Search for delimiters, initial values.
       ISTART=0
       IEND=0
*   Opening parenthesis.
       ICALL=INDEX(STRING,'CALL')
       DO 10 I=ICALL+4,MXINCH
       IF(STRING(I:I).EQ.'(')THEN
            ISTART=I+1
            SQUOTE=.FALSE.
            DQUOTE=.FALSE.
            RQUOTE=.FALSE.
            NLEV=1
*   Closing parenthesis.
            DO 30 J=ISTART,MXINCH
            IF(STRING(J:J).EQ.'(')THEN
                 IF(.NOT.(SQUOTE.OR.DQUOTE.OR.RQUOTE))NLEV=NLEV+1
            ELSEIF(STRING(J:J).EQ.')')THEN
                 IF(.NOT.(SQUOTE.OR.DQUOTE.OR.RQUOTE))NLEV=NLEV-1
            ELSEIF(STRING(J:J).EQ.'''')THEN
                 SQUOTE=.NOT.SQUOTE
            ELSEIF(STRING(J:J).EQ.'"')THEN
                 DQUOTE=.NOT.DQUOTE
            ELSEIF(STRING(J:J).EQ.'`')THEN
                 RQUOTE=.NOT.RQUOTE
            ENDIF
            IF(NLEV.EQ.0)THEN
                 IEND=J-1
                 IF(STRING(J:).NE.')')PRINT *,' !!!!!! INPCAL WARNING'//
     -                ' : Extra characters after the closing'//
     -                ' parenthesis are ignored.'
                 GOTO 20
            ENDIF
30          CONTINUE
            GOTO 20
       ENDIF
10     CONTINUE
20     CONTINUE
*   Check syntax.
       IF((ISTART.EQ.0.AND.IEND.NE.0).OR.
     -      (IEND.EQ.0.AND.ISTART.NE.0))THEN
            PRINT *,' !!!!!! INPCAL WARNING : The arguments of the'//
     -           ' CALL statement are not'
            PRINT *,'                         properly delimited'//
     -           ' ; statement is ignored.'
            RETURN
       ELSEIF(ISTART.EQ.0.AND.IEND.EQ.0.OR.ISTART.GT.IEND)THEN
            ISTART=0
            IEND=0
            GOTO 130
       ELSEIF(STRING(ISTART:IEND).EQ.' ')THEN
            ISTART=0
            IEND=0
            GOTO 130
       ENDIF
*** Locate undeclared global variable arguments.
       I0=ISTART-1
       KARG=0
*   Find the beginning of the word.
100    CONTINUE
       I0=I0+1
       IF(I0.GT.IEND)THEN
            PRINT *,' !!!!!! INPCAL WARNING : No argument found after'//
     -           ' last delimiter.'
            GOTO 130
       ENDIF
       IF(STRING(I0:I0).EQ.' ')GOTO 100
*   First non-blank character a , ?
       IF(STRING(I0:I0).EQ.',')THEN
            PRINT *,' !!!!!! INPCAL WARNING : No argument found'//
     -           ' between 2 delimiters.'
            GOTO 100
       ENDIF
*   Find the end of the word.
       I2=I0-1
110    CONTINUE
       I2=I2+1
       IF(STRING(I2:I2).EQ.',')THEN
            I2=I2-1
       ELSEIF(I2.LT.IEND)THEN
            GOTO 110
       ENDIF
*   And remove trailing blanks.
       I1=I2+1
120    CONTINUE
       I1=I1-1
       IF(I1.LT.I0)THEN
            PRINT *,' !!!!!! INPCAL WARNING : Argument string ',KARG+1,
     -           ' is entirely blank.'
       ELSEIF(STRING(I1:I1).EQ.' ')THEN
            GOTO 120
       ENDIF
*   See whether this is a valid variable name.
       IF(I1.GE.I0)THEN
            KARG=KARG+1
            IF(LDEBUG)WRITE(LUNOUT,'(''  ++++++ INPCAL DEBUG   :'',
     -           '' Argument '',I3,'': '',A)') KARG,STRING(I0:I1)
            IF(INDEX('ABCDEFGHIJKLMNOPQRSTUVWXYZ',
     -           STRING(I0:I0)).EQ.0.OR.
     -           STRING(I0:I1).EQ.'PI'.OR.
     -           STRING(I0:I1).EQ.'FALSE'.OR.
     -           STRING(I0:I1).EQ.'TRUE'.OR.
     -           STRING(I0:I1).EQ.'RND_UNIFORM'.OR.
     -           STRING(I0:I1).EQ.'RND_GAUSS'.OR.
     -           STRING(I0:I1).EQ.'RND_NORMAL'.OR.
     -           STRING(I0:I1).EQ.'RND_EXP'.OR.
     -           STRING(I0:I1).EQ.'RND_EXPONENTIAL'.OR.
     -           STRING(I0:I1).EQ.'RND_POISSON'.OR.
     -           STRING(I0:I1).EQ.'RND_POLYA'.OR.
     -           STRING(I0:I1).EQ.'RND_GAMMA'.OR.
     -           STRING(I0:I1).EQ.'RND_LANDAU'.OR.
     -           STRING(I0:I1).EQ.'RND_LAPLACE'.OR.
     -           STRING(I0:I1).EQ.'RND_FUNCTION')GOTO 150
            DO 140 II=I0+1,I1
            IF(INDEX('+-*/&|<=#>^ ,.:;([{)]}''"`',STRING(II:II)).NE.0)
     -           GOTO 150
140         CONTINUE
            DO 160 JJ=1,NGLB
            IF(GLBVAR(JJ).EQ.STRING(I0:I1))GOTO 150
160         CONTINUE
            IF(LDEBUG)WRITE(LUNOUT,'(26X,''Is an undeclared global.'')')
            IF(NGLB.LT.MXVAR)THEN
                 NGLB=NGLB+1
                 GLBVAR(NGLB)=STRING(I0:I1)
                 GLBVAL(NGLB)=0
                 GLBMOD(NGLB)=0
                 IF(I1-I0+1.GT.LEN(GLBVAR(NGLB)))THEN
                      PRINT *,' !!!!!! INPCAL WARNING : '//
     -                     STRING(I0:I1)//' is too long for a'//
     -                     ' variable name; has been truncated.'
                 ELSE
                      WRITE(LUNOUT,'(''  ------ INPCAL MESSAGE : '',A,
     -                     '' declared as a global variable.'')')
     -                     STRING(I0:I1)
                 ENDIF
            ELSE
                 PRINT *,' !!!!!! INPCAL WARNING : No room left to',
     -                ' store ',STRING(I0:I1),' as a global variable.'
                 RETURN
            ENDIF
150         CONTINUE
       ENDIF
*   Next element.
       I0=I2+1
       IF(I0.LE.IEND)GOTO 100
*   Finished.
130    CONTINUE
*** Pass the argument on to ALGPRE to build an instruction list.
       IF(ISTART.EQ.0.AND.IEND.EQ.0)THEN
            CALL ALGPRE('1',1,GLBVAR,NGLB,NNRES,USE,IENTRY,IFAIL1)
       ELSE
            CALL ALGPRE(STRING(ISTART:IEND),IEND-ISTART+1,
     -           GLBVAR,NGLB,NNRES,USE,IENTRY,IFAIL1)
       ENDIF
       IF(IFAIL1.NE.0)THEN
            PRINT *,' !!!!!! INPCAL WARNING : The arguments of the'//
     -           ' CALL statement can'
            PRINT *,'                         not be translated ;'//
     -           ' statement is ignored.'
            IF(MODE.EQ.'EXECUTE')CALL ALGCLR(IENTRY)
            RETURN
       ENDIF
*   Locate the entry point number.
       IENTNO=0
       DO 80 I=1,NALGE
       IF(ALGENT(I,1).EQ.IENTRY)IENTNO=I
80     CONTINUE
       IF(IENTNO.EQ.0)THEN
            PRINT *,' !!!!!! INPCAL WARNING : Unable to find the'//
     -           ' entry point; program bug.'
            IF(MODE.EQ.'EXECUTE')CALL ALGCLR(IENTRY)
            RETURN
       ENDIF
*** Scan the instruction list, change RESULT into ARGUMENT.
       DO 50 I=ALGENT(IENTNO,5),ALGENT(IENTNO,5)+ALGENT(IENTNO,6)-1
       IF(INS(I,2).NE.0)GOTO 50
       IF(INS(I,3).LE.NGLB.AND.INS(I,3).GT.0)THEN
            INS(I,1)=0
       ELSE
            INS(I,1)=2
       ENDIF
       INS(I,2)=8
50     CONTINUE
*** Locate the routine name, first isolate the name.
       IFIRST=0
       ILAST=NCHAR(2)
       DO 60 I=1,NCHAR(2)
       IF(IFIRST.EQ.0.AND.WORD(2)(I:I).NE.' ')IFIRST=I
       IF(WORD(2)(I:I).EQ.' '.OR.WORD(2)(I:I).EQ.'(')THEN
            ILAST=I-1
            GOTO 70
       ENDIF
60     CONTINUE
70     CONTINUE
*** Check it is not blank.
       IF(IFIRST.EQ.0.OR.ILAST.LT.IFIRST)THEN
            PRINT *,' !!!!!! INPCAL WARNING : The routine name is'//
     -           ' blank or null; CALL ignored.'
            IF(MODE.EQ.'EXECUTE')CALL ALGCLR(IENTRY)
            RETURN
       ENDIF
*** Identify, first general purpose printing.
       IF(WORD(2)(IFIRST:ILAST).EQ.'PRINT')THEN
            IPROC=-1
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'TIME_DELAY')THEN
            IPROC=-2
*   Cell related calls.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_CELL_DATA')THEN
            IPROC=-11
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_CELL_SIZE')THEN
            IPROC=-12
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_WIRE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GET_WIRE_DATA')THEN
            IPROC=-13
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_X_PLANES')THEN
            IPROC=-14
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_Y_PLANES')THEN
            IPROC=-15
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_PERIODS')THEN
            IPROC=-16
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_SOLID_DATA')THEN
            IPROC=-17
*   String manipulation.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_INDEX')THEN
            IPROC=-901
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_PORTION')THEN
            IPROC=-902
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_DELETE')THEN
            IPROC=-903
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_LOWER')THEN
            IPROC=-904
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_UPPER')THEN
            IPROC=-905
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_WORDS')THEN
            IPROC=-906
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_WORD')THEN
            IPROC=-907
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_MATCH')THEN
            IPROC=-908
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_REPLACE')THEN
            IPROC=-909
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_LISTING'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'STRING_LIST'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'LIST_STRINGS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'LIST_STRING'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SLIST')THEN
            IPROC=-910
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STRING_LENGTH')THEN
            IPROC=-911
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DELETE_STRING'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DELETE_STRINGS')THEN
            IPROC=-912
*   File handling.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INQUIRE_TYPE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'QTYPE')THEN
            IPROC=-50
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INQUIRE_FILE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'QFILE')THEN
            IPROC=-51
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INQUIRE_MEMBER'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'QMEMBER')THEN
            IPROC=-52
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'OBJECT_LISTING'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'LIST_OBJECTS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'LIST_OBJECT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'OLIST')THEN
            IPROC=-53
*   Fitting.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FIT_GAUSSIAN')THEN
            IPROC=-60
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FIT_POLYNOMIAL')THEN
            IPROC=-61
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FIT_EXPONENTIAL')THEN
            IPROC=-62
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FIT_POLYA')THEN
            IPROC=-63
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FIT_FUNCTION')THEN
            IPROC=-64
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FIT_MATHIESON')THEN
            IPROC=-65
*   Signal related calls.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'THRESHOLD_CROSSING')THEN
            IPROC=-70
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_SIGNAL')THEN
            IPROC=-71
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STORE_SIGNAL')THEN
            IPROC=-72
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_RAW_SIGNAL')THEN
            IPROC=-73
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LIST_RAW_SIGNALS')THEN
            IPROC=-74
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SIGNAL_FIELD'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'WEIGHTING_FIELD')THEN
            IPROC=-75
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SIGNAL_FIELD_3'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'WEIGHTING_FIELD_3')THEN
            IPROC=-76
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INDUCED_CHARGE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'QIN')THEN
            IPROC=-77
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ADD_SIGNAL'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ADD_SIGNALS')THEN
            IPROC=-78
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'AVALANCHE_SIGNAL')THEN
            IPROC=-79
*   Matrix procedures.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'EXTRACT_SUBMATRIX')THEN
            IPROC=-80
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'STORE_SUBMATRIX')THEN
            IPROC=-81
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PRINT_MATRIX'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PRINT_MATRICES'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'MPRINT')THEN
            IPROC=-82
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'BOOK_MATRIX'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'MBOOK')THEN
            IPROC=-83
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RESHAPE_MATRIX')THEN
            IPROC=-84
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ADJUST_MATRIX')THEN
            IPROC=-85
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DELETE_MATRIX'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DELETE_MATRICES'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'MDELETE')THEN
            IPROC=-86
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LIST_MATRIX'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'LIST_MATRICES'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'MLIST')THEN
            IPROC=-87
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'WRITE_MATRIX'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'MWRITE')THEN
            IPROC=-88
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_MATRIX'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'MGET')THEN
            IPROC=-89
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'MULTIPLY_MATRICES')THEN
            IPROC=-90
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SOLVE_EQUATION')THEN
            IPROC=-91
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DIMENSIONS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DIMENSION')THEN
            IPROC=-92
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERPOLATE')THEN
            IPROC=-93
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_SURFACE')THEN
            IPROC=-94
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DERIVATIVE')THEN
            IPROC=-95
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERPOLATE_1')THEN
            IPROC=-96
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERPOLATE_2')THEN
            IPROC=-97
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERPOLATE_3')THEN
            IPROC=-98
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERPOLATE_4')THEN
            IPROC=-99
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_CONTOUR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_CONTOURS')THEN
            IPROC=-100
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_ERROR_BAND'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ERROR_BAND')THEN
            IPROC=-101
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ZERO'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ZEROES')THEN
            IPROC=-102
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_BARCHART'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_BARCHART'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_BAR_CHART'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_BAR_CHART')THEN
            IPROC=-103
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SORT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SORT_MATRIX')THEN
            IPROC=-104
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_3D')THEN
            IPROC=-105
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LOCATE_MAXIMUM')THEN
            IPROC=-106
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LOCATE_MINIMUM')THEN
            IPROC=-107
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SMOOTH'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SMOOTHEN'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GAUSSIAN_SMOOTH'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SMOOTH_GAUSSIAN'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SMOOTHEN_GAUSSIAN')THEN
            IPROC=-108
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'CUMULATE_MATRIX')THEN
            IPROC=-109
*   Gas related procedures.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GAS_AVAILABILITY')THEN
            IPROC=-201
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_GAS_DATA')THEN
            IPROC=-202
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VELOCITY_E'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VELOCITY_E')THEN
            IPROC=-203
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ION_MOBILITY')THEN
            IPROC=-204
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LONGITUDINAL_DIFFUSION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SIGMA_L')THEN
            IPROC=-205
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'TOWNSEND'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'TOWNSEND_COEFFICIENT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'TOWNSEND_COEFFICIENTS')THEN
            IPROC=-206
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ATTACHMENT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ATTACHMENT_COEFFICIENT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ATTACHMENT_COEFFICIENTS')THEN
            IPROC=-207
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LORENTZ_ANGLES'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'LORENTZ_ANGLE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VE_ANGLES'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VE_ANGLE')THEN
            IPROC=-208
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'TRANSVERSE_DIFFUSION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SIGMA_T')THEN
            IPROC=-209
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VELOCITY'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VELOCITY')THEN
            IPROC=-210
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VELOCITY_BTRANSVERSE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VELOCITY_BTRANSVERSE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VELOCITY_BTRANSVERSAL'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VELOCITY_BTRANSVERSAL'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VELOCITY_BTRANS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VELOCITY_BTRANS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VELOCITY_B'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VELOCITY_B')THEN
            IPROC=-211
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VELOCITY_EXB'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'VELOCITY_EXB')THEN
            IPROC=-212
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DIFFUSION_TENSOR')THEN
            IPROC=-213
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_E/P_TABLE')THEN
            IPROC=-214
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ION_DISSOCIATION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.
     -      'ION_DISSOCIATION_COEFFICIENT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.
     -      'ION_DISSOCIATION_COEFFICIENTS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DISSOCIATION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.
     -      'DISSOCIATION_COEFFICIENT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.
     -      'DISSOCIATION_COEFFICIENTS')THEN
            IPROC=-215
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'EXCITATION_ID'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'EXC_ID'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'EXCITATION_IDENTIFIER'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'EXCITATION_NAME')THEN
            IPROC=-216
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'IONISATION_ID'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ION_ID'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'IONISATION_IDENTIFIER'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'IONISATION_NAME')THEN
            IPROC=-217
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'CROSS_SECTION_ID'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'CS_ID'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'CROSS_SECTION_IDENTIFIER'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'CROSS_SECTION_NAME')THEN
            IPROC=-218
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LEVEL_COUNT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'LEVELS_COUNT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'COUNT_LEVEL'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'COUNT_LEVELS')THEN
            IPROC=-219
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'EXCITATION_RATE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'EXC_RATE')THEN
            IPROC=-220
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'IONISATION_RATE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ION_RATE')THEN
            IPROC=-221
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'EXTRACT_LEVELS')THEN
            IPROC=-222
*   Electric and magnetic field.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ELECTRIC_FIELD'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'EFIELD'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ELECTRIC_FIELD_2'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'EFIELD2')THEN
            IPROC=-301
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ELECTRIC_FIELD_3'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'EFIELD3')THEN
            IPROC=-302
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FORCE_FIELD')THEN
            IPROC=-303
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'MAGNETIC_FIELD'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'BFIELD')THEN
            IPROC=-304
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'MAGNETIC_FIELD_3'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'BFIELD3')THEN
            IPROC=-305
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTEGRATE_CHARGE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'CHARGE')THEN
            IPROC=-306
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTEGRATE_FLUX'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'FLUX')THEN
            IPROC=-307
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'MAP_INDEX')THEN
            IPROC=-310
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'MAP_ELEMENT')THEN
            IPROC=-311
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'MAP_MATERIAL')THEN
            IPROC=-312
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_FIELD_AREA')THEN
            IPROC=-320
*   Timing, progress logging.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'TIME_LOG'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'TIME_LOGGING')THEN
            IPROC=-401
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PROGRESS_SET')THEN
            IPROC=-402
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PROGRESS_PRINT')THEN
            IPROC=-403
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SLEEP')THEN
            IPROC=-404
*   Drifting.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'NEW_TRACK')THEN
            IPROC=-501
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_CLUSTER')THEN
            IPROC=-502
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ELECTRON')THEN
            IPROC=-503
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ION')THEN
            IPROC=-504
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ELECTRON_3')THEN
            IPROC=-505
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ION_3')THEN
            IPROC=-506
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_DRIFT_LINE')THEN
            IPROC=-507
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_MC_ELECTRON'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ELECTRON_MC')THEN
            IPROC=-508
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_MC_ION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ION_MC')THEN
            IPROC=-509
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_DRIFT_LINE')THEN
            IPROC=-510
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_TRACK')THEN
            IPROC=-511
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'AVALANCHE')THEN
            IPROC=-512
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_DRIFT_AREA')THEN
            IPROC=-513
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_NEGATIVE_ION')THEN
            IPROC=-514
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_NEGATIVE_ION_3')THEN
            IPROC=-515
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_MC_NEGATIVE_ION')THEN
            IPROC=-516
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VACUUM_ELECTRON'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ELECTRON_VACUUM')THEN
            IPROC=-517
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_VACUUM_ION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ION_VACUUM')THEN
            IPROC=-518
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_MC_TEST')THEN
            IPROC=-519
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_INFORMATION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_INFO')THEN
            IPROC=-520
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_POSITRON')THEN
            IPROC=-521
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_POSITRON_3')THEN
            IPROC=-522
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_MC_POSITRON')THEN
            IPROC=-523
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERPOLATE_TRACK')THEN
            IPROC=-524
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RND_MULTIPLICATION')THEN
            IPROC=-525
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ELECTRON_VELOCITY')THEN
            IPROC=-526
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'ION_VELOCITY')THEN
            IPROC=-527
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PRINT_DRIFT_LINE')THEN
            IPROC=-528
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_DIVERGENCE')THEN
            IPROC=-529
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ROTATION')THEN
            IPROC=-530
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTEGRATE_EXCITATIONS')THEN
            IPROC=-531
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTEGRATE_IONISATIONS')THEN
            IPROC=-532
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DRIFT_MICROSCOPIC_ELECTRON'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_ELECTRON_MICROSCOPIC'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DRIFT_MICROSCOPIC')THEN
            IPROC=-533
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'AVALANCHE_MICROSCOPIC'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'MICROSCOPIC_AVALANCHE')THEN
            IPROC=-534
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'AVALANCHE_INFORMATION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'AVALANCHE_INFO')THEN
            IPROC=-535
*   Histograms.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'BOOK_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HBOOK')THEN
            IPROC=-602
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'FILL_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HFILL')THEN
            IPROC=-603
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HPLOT')THEN
            IPROC=-604
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PRINT_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HPRINT')THEN
            IPROC=-605
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'DELETE_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'DELETE_HISTOGRAMS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HDELETE')THEN
            IPROC=-606
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'LIST_HISTOGRAMS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HLIST')THEN
            IPROC=-607
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'WRITE_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HWRITE')THEN
            IPROC=-608
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GET_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HGET')THEN
            IPROC=-609
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INQUIRE_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'QHIST')THEN
            IPROC=-610
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'CONVOLUTE')THEN
            IPROC=-611
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'BARYCENTRE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'BARYCENTER')THEN
            IPROC=-612
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'HISTOGRAM_TO_MATRIX')THEN
            IPROC=-613
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'MATRIX_TO_HISTOGRAM')THEN
            IPROC=-614
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'WRITE_HISTOGRAM_RZ'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'WRITE_HISTOGRAMS_RZ'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HROUT')THEN
            IPROC=-615
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'CUT_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HCUT')THEN
            IPROC=-616
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'REBIN_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HREBIN')THEN
            IPROC=-617
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RESET_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HRESET')THEN
            IPROC=-618
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'CUMULATE_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HCUMUL')THEN
            IPROC=-619
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SKIP_HISTOGRAM'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'HSKIP')THEN
            IPROC=-620
*   Utility routines.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'CARTESIAN_TO_POLAR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'CTP')THEN
            IPROC=-701
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'CARTESIAN_TO_INTERNAL'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'CTR')THEN
            IPROC=-702
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'POLAR_TO_CARTESIAN'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PTC')THEN
            IPROC=-703
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'POLAR_TO_INTERNAL'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PTR')THEN
            IPROC=-704
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERNAL_TO_CARTESIAN'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'RTC')THEN
            IPROC=-705
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INTERNAL_TO_POLAR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'RTP')THEN
            IPROC=-706
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PREPARE_RND_FUNCTION')THEN
            IPROC=-710
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'EXTREMUM')THEN
            IPROC=-711
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'INITIALISE_GENERATORS')THEN
            IPROC=-712
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'VAVILOV')THEN
            IPROC=-713
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RND_VAVILOV_FAST')THEN
            IPROC=-714
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RND_VAVILOV')THEN
            IPROC=-715
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RND_IONISATION_ENERGY')THEN
            IPROC=-716
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RND_UNIT_SPHERE')THEN
            IPROC=-717
*   Plotting.
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_FRAME')THEN
            IPROC=-801
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_END')THEN
            IPROC=-802
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_MARKER'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_MARKERS')THEN
            IPROC=-803
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_LINE'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_VECTOR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_VECTORS')THEN
            IPROC=-804
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_TEXT')THEN
            IPROC=-805
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_COMMENT')THEN
            IPROC=-806
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_AREA')THEN
            IPROC=-807
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_GRAPH')THEN
            IPROC=-808
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_ERROR_BAR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_ERROR_BARS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ERROR_BAR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'ERROR_BARS')THEN
            IPROC=-809
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PROJECT_LINE')THEN
            IPROC=-810
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PROJECT_MARKER'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PROJECT_MARKERS')THEN
            IPROC=-811
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_START')THEN
            IPROC=-812
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_WINDOW'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSWN')THEN
            IPROC=-813
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_VIEWPORT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSVP')THEN
            IPROC=-814
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SELECT_NT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSELNT')THEN
            IPROC=-815
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_POLYLINE')THEN
            IPROC=-816
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_POLYMARKER')THEN
            IPROC=-817
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SET_POLYLINE_ATTRIBUTES'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SET_LINE_ATTRIBUTES')THEN
            IPROC=-818
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SET_POLYMARKER_ATTRIBUTES'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'SET_MARKER_ATTRIBUTES')THEN
            IPROC=-819
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SET_TEXT_ATTRIBUTES')THEN
            IPROC=-820
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'SET_AREA_ATTRIBUTES')THEN
            IPROC=-821
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_TEXT')THEN
            IPROC=-822
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_AREA')THEN
            IPROC=-823
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SET_TEXT_ALIGNMENT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSTXAL')THEN
            IPROC=-824
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SET_TEXT_COLOUR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSTXCI')THEN
            IPROC=-825
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SET_CHARACTER_HEIGHT'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSCHH')THEN
            IPROC=-826
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SET_CHARACTER_EXPANSION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSCHXP')THEN
            IPROC=-827
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SET_CHARACTER_SPACING'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSCHSP')THEN
            IPROC=-828
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SET_CHARACTER_UP_VECTOR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSCHUP')THEN
            IPROC=-829
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'GKS_SET_TEXT_FONT_PRECISION'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'GSTXFP')THEN
            IPROC=-830
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_OBLIQUE_ERROR_BAR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'PLOT_OBLIQUE_ERROR_BARS'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'OBLIQUE_ERROR_BAR'.OR.
     -      WORD(2)(IFIRST:ILAST).EQ.'OBLIQUE_ERROR_BARS')THEN
            IPROC=-831
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_ARROW')THEN
            IPROC=-850
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_TITLE')THEN
            IPROC=-851
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_X_LABEL')THEN
            IPROC=-852
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'PLOT_Y_LABEL')THEN
            IPROC=-853
       ELSEIF(WORD(2)(IFIRST:ILAST).EQ.'RAINBOW')THEN
            IPROC=-854
*   Rest is not known.
       ELSE
            PRINT *,' !!!!!! INPCAL WARNING : Procedure '//
     -           WORD(2)(IFIRST:ILAST)//' is not known; not called.'
            IF(MODE.EQ.'EXECUTE')CALL ALGCLR(IENTRY)
            RETURN
       ENDIF
*** Add the CALL statement to the instruction list.
       IF(NINS.GE.MXINS)THEN
            PRINT *,' !!!!!! INPCAL WARNING : Instruction list buffer'//
     -           ' is full; CALL statement not processed.'
            IF(MODE.EQ.'EXECUTE')CALL ALGCLR(IENTRY)
            RETURN
       ENDIF
       IF(ISTART.EQ.0.AND.IEND.EQ.0)THEN
            INS(NINS-1,1)=IPROC
            INS(NINS-1,2)=9
            INS(NINS-1,3)=0
            INS(NINS-1,4)=0
            ALGENT(IENTNO,6)=2
            ALGENT(IENTNO,10)=0
       ELSE
            INS(NINS+1,1)=INS(NINS,1)
            INS(NINS+1,2)=INS(NINS,2)
            INS(NINS+1,3)=INS(NINS,3)
            INS(NINS+1,4)=INS(NINS,4)
            INS(NINS,1)=IPROC
            INS(NINS,2)=9
            INS(NINS,3)=NNRES
            INS(NINS,4)=0
            NINS=NINS+1
            ALGENT(IENTNO,6)=ALGENT(IENTNO,6)+1
            ALGENT(IENTNO,10)=0
       ENDIF
*** In debug mode, print the list.
       IF(LDEBUG)THEN
            WRITE(LUNOUT,'(''  ++++++ INPCAL DEBUG   : Instruction'',
     -           '' list after processing for CALL statement:'')')
            CALL ALGPRT(ALGENT(IENTNO,5),ALGENT(IENTNO,5)+
     -           ALGENT(IENTNO,6)-1)
       ENDIF
*** Execute and clear the instruction list, if requested.
       IF(MODE.EQ.'EXECUTE')THEN
            CALL TIMEL(GLBVAL(1))
            CALL ALGEXE(IENTRY,GLBVAL,GLBMOD,NGLB,RES,MODRES,0,IFAIL1)
            CALL ALGERR
            CALL ALGCLR(IENTRY)
       ENDIF
*** Things seem to have worked.
       IFAIL=0
       END
